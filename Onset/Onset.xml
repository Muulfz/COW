<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Onset</name>
    </assembly>
    <members>
        <member name="T:Onset.AttachInfo">
            <summary>
            Containing information about an attachment.
            </summary>
        </member>
        <member name="P:Onset.AttachInfo.Type">
            <summary>
            The type of the attachment.
            </summary>
        </member>
        <member name="P:Onset.AttachInfo.Entity">
            <summary>
            The entity on which the attachment got attached to.
            </summary>
        </member>
        <member name="T:Onset.Command">
            <summary>
            Methods marked with this command attribute are marked as command handlers.
            Each handling method must have a <see cref="T:Onset.Entities.IPlayer"/> as first argument
            followed by the arguments of the command. Arguments can be optional.
            </summary>
        </member>
        <member name="P:Onset.Command.Name">
            <summary>
            The name of the command defining the chat root.
            </summary>
        </member>
        <member name="M:Onset.Command.#ctor(System.String)">
            <summary>
            The main constructor requiring the command's name.
            </summary>
            <param name="name">The name of the command</param>
        </member>
        <member name="T:Onset.Convertation.Converts">
            <summary>
            This is the convert registry. With it you can request a convertation
            or register new converts.
            </summary>
        </member>
        <member name="M:Onset.Convertation.Converts.Register(Onset.Convertation.IConvert)">
            <summary>
            Registers a new convert in the registry.
            </summary>
            <param name="convert">The convert to be registered</param>
        </member>
        <member name="M:Onset.Convertation.Converts.Convert(System.String[],System.Type[])">
            <summary>
            Converts the given objects into it wanted types.
            </summary>
            <param name="objects">The given objects</param>
            <param name="wantedTypes">The wanted types</param>
        </member>
        <member name="T:Onset.Convertation.IConvert">
            <summary>
            Converts are meant to convert objects into a specific type. This mostly defined
            by a parameter.
            Converts are used in the Command section as well as the Remote Event section to convert
            the given object array into its specified typed array so it can be used by the
            registry to trigger the specified trigger.
            </summary>
        </member>
        <member name="M:Onset.Convertation.IConvert.CanConvert(System.Type)">
            <summary>
            Checks whether this convert can convert the given object in to the wanted type.
            </summary>
            <param name="wantedType">The wanted type</param>
            <returns>True if the convert can do the convert</returns>
        </member>
        <member name="M:Onset.Convertation.IConvert.Convert(System.String,System.Type)">
            <summary>
            Converts the given object into the wanted type.
            </summary>
            <param name="givenObject">The given object</param>
            <param name="wantedType">The wanted type</param>
            <returns>The converted object</returns>
        </member>
        <member name="T:Onset.Dimension.IDimension">
            <summary>
            Represents every dimension in onset from here you can interact with them
            or the entities in this dimension. 
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.ID">
            <summary>
            The id of this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Players">
            <summary>
            A list with all players currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.NPCs">
            <summary>
            A list with all npcs currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Doors">
            <summary>
            A list with all doors currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Pickups">
            <summary>
            A list with all pickups currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Objects">
            <summary>
            A list with all objects currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Text3Ds">
            <summary>
            A list with all 3D texts currently in this dimension.
            </summary>
        </member>
        <member name="P:Onset.Dimension.IDimension.Vehicles">
            <summary>
            A list with all vehicles currently in this dimension.
            </summary>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreateExplosion(System.UInt32,Onset.Dimension.Vector,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates an explosion in this dimension.
            </summary>
            <param name="id">The number which identifies the explosion</param>
            <param name="position">The position at which the explosion will be spawned</param>
            <param name="hasSound">Whether the explosion has a sound or not</param>
            <param name="camShakeRadius">The radius in which the cam will shake</param>
            <param name="radialForce">The radial force of the explosion</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreateDoor(System.UInt16,Onset.Dimension.Vector,System.Double,System.Boolean)">
            <summary>
            Creates a <see cref="T:Onset.Entities.IDoor"/> in this dimension by the given parameters.
            </summary>
            <param name="model">The model of the Door (<see cref="!:https://dev.playonset.com/wiki/Doors">Model List</see>)</param>
            <param name="position">The position at which the door will be spawned</param>
            <param name="yaw">The yaw heading of the door</param>
            <param name="interactable">Whether a player can interact with door or not</param>
            <returns>The created door</returns>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreatePickup(System.UInt64,Onset.Dimension.Vector)">
            <summary>
            Creates a <see cref="T:Onset.Entities.IPickup"/> in this dimension by the given parameters.
            </summary>
            <param name="model">The module of the pickup (<see cref="!:https://dev.playonset.com/wiki/Objects">Object List</see>)</param>
            <param name="position">The position at which the pickup will be spawned</param>
            <returns>The created pickup</returns>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreateObject(System.UInt64,Onset.Dimension.Vector,Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            Creates an <see cref="T:Onset.Entities.IObject"/> in this dimension by the given parameters.
            </summary>
            <param name="model">The module of the object (<see cref="!:https://dev.playonset.com/wiki/Objects">Object List</see>)</param>
            <param name="position">The position at which the object will be spawned</param>
            <param name="rotation">The rotation of the object. Default: 0</param>
            <param name="scale">The scale of the object. Default: 1</param>
            <returns>The created pickup</returns>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreateText3D(System.String,System.Single,Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            Creates a <see cref="T:Onset.Entities.IText3D"/> in this dimension by the given parameters.
            </summary>
            <param name="text">The text to be shown</param>
            <param name="size">The size of the text</param>
            <param name="position">The position of the text</param>
            <param name="r">The rotation of the text. Default: 0</param>
            <returns>The created 3D text</returns>
        </member>
        <member name="M:Onset.Dimension.IDimension.CreateVehicle(Onset.Enums.VehicleModel,Onset.Dimension.Vector,System.Single)">
            <summary>
            Creates a <see cref="T:Onset.Entities.IVehicle"/> in this dimension by the given parameters.
            </summary>
            <param name="model">The vehicle model (<see cref="T:Onset.Enums.VehicleModel"/>)</param>
            <param name="position">The position the vehicle gets spawned</param>
            <param name="heading">The yaw of the vehicle. Default: 0</param>
            <returns>The created vehicle</returns>
        </member>
        <member name="T:Onset.Dimension.Vector">
            <summary>
            This class represents an euclidean vector and gives some functionality.
            <br/><br/>
            <b>!IMPORTANT NOTE!</b><i> When setting an axis, the vector won't synced to the given entities. You need to set the complete vector, to sync the values with Onset.</i>
            </summary>
        </member>
        <member name="F:Onset.Dimension.Vector.Empty">
            <summary>
            An empty vector which has 0 on every axis.
            </summary>
        </member>
        <member name="F:Onset.Dimension.Vector.One">
            <summary>
            An vector containing only 1 on every axis.
            </summary>
        </member>
        <member name="P:Onset.Dimension.Vector.X">
            <summary>
            The x-value of the vector.
            </summary>
        </member>
        <member name="P:Onset.Dimension.Vector.Y">
            <summary>
            The y-value of the vector.
            </summary>
        </member>
        <member name="P:Onset.Dimension.Vector.Z">
            <summary>
            The z-value of the vector.
            </summary>
        </member>
        <member name="M:Onset.Dimension.Vector.op_Addition(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            The overridden addition operator.
            Adds the vector v2 onto the vector v1.
            </summary>
            <returns>The sum vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.op_Subtraction(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            The overridden subtraction operator.
            Subtracts the vector v2 from the vector v1.
            </summary>
            <returns>The diff vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.op_Division(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            The overridden division operator.
            Divides the vector v2 from the vector v1.
            </summary>
            <returns>The quotient vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.op_Multiply(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            The overridden multiplication operator.
            Multiplies the vector v2 with the vector v1.
            </summary>
            <returns>The product vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.op_Modulus(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            The overridden modulo operator.
            The modulo calculation is like this: v1 % v2
            </summary>
        </member>
        <member name="M:Onset.Dimension.Vector.Add(System.Double)">
            <summary>
            Adds the given value on every value of this vector.
            </summary>
            <param name="v">The value to be added</param>
            <returns>This vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Subtract(System.Double)">
            <summary>
            Subtracts the given value from every value of this vector.
            </summary>
            <param name="v">The value to be subtracted</param>
            <returns>This vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Multiply(System.Double)">
            <summary>
            Multiplies the given value with every value of this vector.
            </summary>
            <param name="v">The value to be multiplied</param>
            <returns>This vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Divide(System.Double)">
            <summary>
            Divides the given value from every value of this vector.
            </summary>
            <param name="v">The value to be divided</param>
            <returns>This vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Mod(System.Double)">
            <summary>
            Applies module to all values of this vector.
            </summary>
            <param name="v">The modulo value</param>
            <returns>This vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Add(Onset.Dimension.Vector)">
            <see cref="M:Onset.Dimension.Vector.Add(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Subtract(Onset.Dimension.Vector)">
            <see cref="M:Onset.Dimension.Vector.Subtract(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Multiply(Onset.Dimension.Vector)">
            <see cref="M:Onset.Dimension.Vector.Multiply(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Divide(Onset.Dimension.Vector)">
            <see cref="M:Onset.Dimension.Vector.Divide(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Mod(Onset.Dimension.Vector)">
            <see cref="M:Onset.Dimension.Vector.Mod(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Add(System.Double,System.Double,System.Double)">
            <see cref="M:Onset.Dimension.Vector.Add(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Subtract(System.Double,System.Double,System.Double)">
            <see cref="M:Onset.Dimension.Vector.Subtract(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Multiply(System.Double,System.Double,System.Double)">
            <see cref="M:Onset.Dimension.Vector.Multiply(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Divide(System.Double,System.Double,System.Double)">
            <see cref="M:Onset.Dimension.Vector.Divide(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.Mod(System.Double,System.Double,System.Double)">
            <see cref="M:Onset.Dimension.Vector.Mod(System.Double)"/>
        </member>
        <member name="M:Onset.Dimension.Vector.DistanceTo(Onset.Dimension.Vector)">
            <summary>
            Calculates the distance to the given vector.
            </summary>
            <param name="o">The other vector</param>
            <returns>The distance in float</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.DistanceTo2D(Onset.Dimension.Vector)">
            <summary>
            Calculates the distance to the given vector.
            Different from <see cref="M:Onset.Dimension.Vector.DistanceTo(Onset.Dimension.Vector)"/> is that it only uses X and Y.
            </summary>
            <param name="o">The other vector</param>
            <returns>The distance in float</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Length">
            <summary>
            Calculates the length of this vector.
            </summary>
            <returns>The length as double</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Length2D">
            <summary>
            Calculates the length of this vector.
            Different from <see cref="M:Onset.Dimension.Vector.Length"/> is that it only uses X and Y.
            </summary>
            <returns>The length as double</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Normalize">
            <summary>
            Normalizes the vector (divides the vector with the vector's length).
            </summary>
            <returns>This normalized vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Normalize2D">
            <summary>
            Normalizes the vector (divides the vector with the vector's length).
            Different from <see cref="M:Onset.Dimension.Vector.Normalize"/> is that it only uses X and Y.
            </summary>
            <returns>This normalized vector</returns>
        </member>
        <member name="M:Onset.Dimension.Vector.To(Onset.Dimension.Vector)">
            <summary>
            Turns this vector into a direction vector which is going TO the given vector.
            </summary>
            <param name="o">The vector which defines the point where this vector is going to</param>
            <returns></returns>
        </member>
        <member name="M:Onset.Dimension.Vector.From(Onset.Dimension.Vector)">
            <summary>
            Turns this vector into a direction vector which is coming FROM the given vector.
            </summary>
            <param name="o">The vector which defines the point where this vector is coming from</param>
            <returns></returns>
        </member>
        <member name="M:Onset.Dimension.Vector.Direction(Onset.Dimension.Vector,Onset.Dimension.Vector)">
            <summary>
            Calculates a direction vector between the given vectors.
            </summary>
            <param name="from">The starting vector where the vector will be coming from</param>
            <param name="to">The end vector where the vector will be going to</param>
            <returns></returns>
        </member>
        <member name="T:Onset.Entities.IDoor">
            <summary>
            Represents a door in the world of onset. Players can interact with doors by pressing 'E'.
            Some of them are physics doors meaning they are pushed open by running against them.
            </summary>
        </member>
        <member name="P:Onset.Entities.IDoor.Model">
            <summary>
            The model of the door (<see cref="!:https://dev.playonset.com/wiki/Doors">Model List</see>).
            </summary>
        </member>
        <member name="P:Onset.Entities.IDoor.IsOpen">
            <summary>
            The state of the door. Whether the door is open or not.
            </summary>
        </member>
        <member name="T:Onset.Entities.IEntity">
            <summary>
            Represents the main base class for all entities. Everything which can be spawned, or which spawns
            automatically and stays as long as it gets destroys, is an entity.
            </summary>
        </member>
        <member name="P:Onset.Entities.IEntity.ID">
            <summary>
            The onset server id of this entity.
            </summary>
        </member>
        <member name="P:Onset.Entities.IEntity.Dimension">
            <summary>
            The onset world dimension of this entity.
            </summary>
        </member>
        <member name="P:Onset.Entities.IEntity.Position">
            <summary>
            The position of the entity.
            </summary>
            <exception cref="T:System.NotImplementedException">When using Position on <see cref="T:Onset.Entities.IText3D"/></exception>
        </member>
        <member name="P:Onset.Entities.IEntity.IsValid">
            <summary>
            Checks if the entity is valid or not.
            If the entity is not valid the COW cleaner will be kicked off
            causing the entities deletion out of the COW system.
            </summary>
        </member>
        <member name="M:Onset.Entities.IEntity.SetDimension(System.UInt32)">
            <summary>
            Sets this entities dimension via the given dimension id.
            </summary>
            <param name="id">The id of the wanted dimension</param>
        </member>
        <member name="M:Onset.Entities.IEntity.SetProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the given value with the given property key.
            </summary>
            <param name="key">The key of the property value to be set</param>
            <param name="value">The value of the property</param>
            <param name="sync">Whether the property should be network synced or not</param>
            <exception cref="T:System.NotImplementedException">When using SetProperty on <see cref="T:Onset.Entities.IDoor"/></exception>
        </member>
        <member name="M:Onset.Entities.IEntity.GetProperty``1(System.String,``0)">
            <summary>
            Returns the value of the given property key.
            </summary>
            <typeparam name="T">The type of the returning value</typeparam>
            <param name="key">The key of the property</param>
            <param name="default">The default value which will be returned if none value is set</param>
            <returns>The property value to the given key or default</returns>
            <exception cref="T:System.NotImplementedException">When using GetProperty on <see cref="T:Onset.Entities.IDoor"/></exception>
        </member>
        <member name="M:Onset.Entities.IEntity.HasProperty``1(System.String)">
            <summary>
            Checks if the given property key is set.
            </summary>
            <typeparam name="T">The type of the needed value</typeparam>
            <param name="key">The property key to be checked</param>
            <returns>True if the key has a value</returns>
            <exception cref="T:System.NotImplementedException">When using HasProperty on <see cref="T:Onset.Entities.IDoor"/></exception>
        </member>
        <member name="T:Onset.Entities.ILifeless">
            <summary>
            Represents a non living entity.
            </summary>
        </member>
        <member name="M:Onset.Entities.ILifeless.Destroy">
            <summary>
            Destroys this entity.
            </summary>
        </member>
        <member name="T:Onset.Entities.ILiving">
            <summary>
            Represents a living entity which offers some functionality with interacting.
            Although it says living entity, the only living entity inheriting this is the player.
            The NPC is also a child of living but does not live itself.
            </summary>
        </member>
        <member name="P:Onset.Entities.ILiving.IsRagdoll">
            <summary>
            The state of the ragdoll of the living entity.
            </summary>
        </member>
        <member name="P:Onset.Entities.ILiving.Health">
            <summary>
            The health of the living entity.
            </summary>
        </member>
        <member name="P:Onset.Entities.ILiving.Heading">
            <summary>
            The heading (yaw) of the given living entity.
            </summary>
        </member>
        <member name="M:Onset.Entities.ILiving.Animate(Onset.Enums.Animation)">
            <summary>
            Plays an animation to the given living entity.
            </summary>
            <param name="animation">The animation to be played</param>
        </member>
        <member name="T:Onset.Entities.INPC">
            <summary>
            Represents a NPC in the world of Onset.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="M:Onset.Entities.INPC.WalkTo(Onset.Dimension.Vector,System.Single)">
            <summary>
            Forces the NPC to walk to the given position with the given speed.
            </summary>
            <param name="position">The position the NPC should walk to</param>
            <param name="speed">The speed with which the NPC is walking (in cm)</param>
        </member>
        <member name="M:Onset.Entities.INPC.Follow(Onset.Entities.IVehicle,System.Single)">
            <summary>
            Forces the NPC to follow the given vehicle with the given speed.
            </summary>
            <param name="vehicle">The vehicle to be followed</param>
            <param name="speed">The speed with which the NPC is walking (in cm)</param>
        </member>
        <member name="M:Onset.Entities.INPC.Follow(Onset.Entities.IPlayer,System.Single)">
            <summary>
            Forces the NPC to follow the given player with the given speed.
            </summary>
            <param name="player">The player to be followed</param>
            <param name="speed">The speed with which the NPC is walking (in cm)</param>
        </member>
        <member name="M:Onset.Entities.INPC.IsStreamedFor(Onset.Entities.IPlayer)">
            <summary>
            Checks if the NPC is streamed to the given player.
            </summary>
            <param name="player">The player to be checked</param>
            <returns>True if the NPC is streamed to the given player</returns>
        </member>
        <member name="M:Onset.Entities.INPC.Destroy">
            <summary>
            Destroys the NPC.
            </summary>
        </member>
        <member name="T:Onset.Entities.IObject">
            <summary>
            Represents an object in the world of Onset.
            </summary>
        </member>
        <member name="P:Onset.Entities.IObject.Model">
            <summary>
            The model of the object.
            </summary>
        </member>
        <member name="P:Onset.Entities.IObject.Rotation">
            <summary>
            The rotation of the object.
            </summary>
        </member>
        <member name="P:Onset.Entities.IObject.Scale">
            <summary>
            The scale of the object.
            </summary>
        </member>
        <member name="P:Onset.Entities.IObject.IsMoving">
            <summary>
            Whether the object is moving or not.
            </summary>
        </member>
        <member name="P:Onset.Entities.IObject.RotationAxis">
            <summary>
            The rotation axis of the object.
            </summary>
        </member>
        <member name="M:Onset.Entities.IObject.IsStreamedFor(Onset.Entities.IPlayer)">
            <summary>
            Checks if the object is streamed to the given player.
            </summary>
            <param name="player">The player to be checked</param>
            <returns>True if the object is streamed to the given player</returns>
        </member>
        <member name="M:Onset.Entities.IObject.SetStreamDistance(System.Double)">
            <summary>
            Sets the given distance as streaming distance for this object.
            </summary>
            <param name="dist">The distance to be set</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Onset.Entities.IObject.GetAttachmentInfo">
            <summary>
            Returns the <see cref="T:Onset.AttachInfo"/> of the attachment of this object.
            </summary>
            <returns>The attach info</returns>
        </member>
        <member name="M:Onset.Entities.IObject.AttachTo(Onset.Entities.IEntity,Onset.Dimension.Vector,Onset.Dimension.Vector,System.String)">
            <summary>
            Attaches the object to the given entity.
            </summary>
            <param name="entityTo">The entity the 3D text gets attached to. The only entities allowed are defined by the <see cref="T:Onset.Enums.AttachType"/></param>
            <param name="position">The vector the 3D text gets positioned by</param>
            <param name="r">The rotation of the attachment</param>
            <param name="socketName">The name of the attaching socket</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Onset.Entities.IObject.Detach">
            <summary>
            Detaches this object if it got attached before.
            </summary>
        </member>
        <member name="M:Onset.Entities.IObject.WalkTo(Onset.Dimension.Vector,System.Single)">
            <summary>
            Moves the object to the given position with the given speed.
            </summary>
            <param name="position">The position the object walks to</param>
            <param name="speed">The speed of the walking</param>
        </member>
        <member name="M:Onset.Entities.IObject.StopWalking">
            <summary>
            Stops the object from walking.
            </summary>
        </member>
        <member name="T:Onset.Entities.IPickup">
            <summary>
            Represents an object which can be picked up. When a vehicle or a player picks the object up, the
            belonging event <see cref="F:Onset.Event.EventType.PlayerPickupHit"/> (player) or <see cref="!:EventType.VehiclePickupHit"/> (vehicle)
            gets called.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPickup.Scale">
            <summary>
            The scale of the pickup.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPickup.SetVisibilityFor(System.Boolean,Onset.Entities.IPlayer[])">
            <summary>
            Sets the visibility of the pickup for the given players to the given visible state.
            </summary>
            <param name="visible">The visible state to be set</param>
            <param name="players">The players for which the setting will be applied</param>
        </member>
        <member name="M:Onset.Entities.IPickup.SetVisibleFor(Onset.Entities.IPlayer[])">
            <summary>
            Sets the pickup visibility for the given players to true.
            <see cref="M:Onset.Entities.IPickup.SetVisibilityFor(System.Boolean,Onset.Entities.IPlayer[])"/>
            </summary>
            <param name="players">The players for which the setting will be applied</param>
        </member>
        <member name="T:Onset.Entities.IPlayer">
            <summary>
            This interface represents the players on the server and gives control over them.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Name">
            <summary>
            The name of this player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.SteamID">
            <summary>
            The 64-bit steam id of this player.
            Is 0, if the player was not yet authenticated.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.HeadSize">
            <summary>
            The players head size between 0.0 and 3.0.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.NetworkStats">
            <summary>
            The network stats from this player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.IsVoiceEnabled">
            <summary>
            The activation state of the player's voice chat.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.IsTalking">
            <summary>
            The state if the player is currently taking or not.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.VoiceDimension">
            <summary>
            The dimension which is needed for the voice chat calculation.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.State">
            <summary>
            The current state of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Movement">
            <summary>
            The current <see cref="T:Onset.Enums.MoveMode"/> of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Speed">
            <summary>
            The current movement speed of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.IsAiming">
            <summary>
            The state if the player is currently aiming.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.IsReloading">
            <summary>
            The state if the player is currently reloading.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Vehicle">
            <summary>
            The vehicle the player is currently in, or null if in none.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.VehicleSeat">
            <summary>
            The current vehicle seat the player sits on.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.GameVersion">
            <summary>
            The game version of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.GUID">
            <summary>
            The global unique identifier of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Locale">
            <summary>
            The locale of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Ping">
            <summary>
            The network ping of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Hostname">
            <summary>
            The hostname of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.RespawnTime">
            <summary>
            The delay of the respawning of the player in milliseconds.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.Armor">
            <summary>
            The armor of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.IsDead">
            <summary>
            The state if the player is dead or alive.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.EquippedWeapon">
            <summary>
            The currently equipped weapon of the player.
            </summary>
        </member>
        <member name="P:Onset.Entities.IPlayer.SelectedSlot">
            <summary>
            The currently selected weapon equip slot of the player.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.Unspectate">
            <summary>
            Disables the spectate mode.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.Spectate">
            <summary>
            Enables the spectate mode.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetSpectate(System.Boolean)">
            <summary>
            Sets the player's spectate mode enabled or disabled.
            </summary>
            <param name="enable">True means the spectate mode is enabled</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.Kick(System.String)">
            <summary>
            Kicks the player with the given reason
            </summary>
            <param name="reason">The reason of the kick</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetWeaponStat(Onset.Enums.Weapon,Onset.Enums.WeaponStat,System.Single)">
            <summary>
            Sets the given weapon stat for the given weapon to the given value.
            </summary>
            <param name="weapon">The weapon id to be set</param>
            <param name="stat">The weapon stat to be set</param>
            <param name="value">The new value of the stat</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetWeapon(Onset.Enums.Weapon,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the given equip slot to the given weapon by the given parameters.
            </summary>
            <param name="weapon">The weapon model to be set</param>
            <param name="ammo">The ammo of the weapon</param>
            <param name="slot">The equip slot to be set (1 - 3)</param>
            <param name="equip">True if the weapon should be equipped after giving</param>
            <param name="loaded">True if the weapon should be loaded with a magazine after giving</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.GetWeapon(System.Int32,System.Int32@)">
            <summary>
            Returns the weapon currently equipped at the given equip slot.
            </summary>
            <param name="slot">The equip slot to check</param>
            <param name="ammo">The ammo of the weapon</param>
            <returns>The weapon model</returns>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetIntoVehicle(Onset.Entities.IVehicle,System.Int32)">
            <summary>
            Sets the player into the given vehicle on the given seat.
            </summary>
            <param name="vehicle">The vehicle in which the player will be sit in</param>
            <param name="seat">The new seat of the player</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.RemoveFromVehicle">
            <summary>
            Removes the player from the vehicle he is sitting in.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.CallRemote(System.String,System.Object[])">
            <summary>
            Triggers a remote event on the client of this current player.
            </summary>
            <param name="name">The name of the remote event to be triggered</param>
            <param name="args">The arguments which will be sent to the client side</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.SendMessage(System.String)">
            <summary>
            Sends this player a message to the chat.
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.AttachParachute">
            <summary>
            Attaches this player a parachute.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.DetachParachute">
            <summary>
            Detaches this player the parachute.
            </summary>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetPickupVisibility(Onset.Entities.IPickup,System.Boolean)">
            <summary>
            Sets the pickup visibility to the given state.
            </summary>
            <param name="pickup">The pickup to which the visibility belongs to</param>
            <param name="visible">The visible which will be set</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetText3DVisibility(Onset.Entities.IText3D,System.Boolean)">
            <summary>
            Sets the 3D text visibility to the given state.
            </summary>
            <param name="text">The 3D text to which the visibility belongs to</param>
            <param name="visible">The visible which will be set</param>
        </member>
        <member name="M:Onset.Entities.IPlayer.SetSpawnLocation(Onset.Dimension.Vector,System.Single)">
            <summary>
            Sets the spawn location of the player.
            </summary>
            <param name="position">The x/y/z coordinates how the player spawns</param>
            <param name="heading">The heading (yaw) how the player spawns</param>
        </member>
        <member name="T:Onset.Entities.IText3D">
            <summary>
            Represents a 3D text in the world of Onset.
            </summary>
        </member>
        <member name="P:Onset.Entities.IText3D.Text">
            <summary>
            The text content of the 3D text.
            </summary>
        </member>
        <member name="M:Onset.Entities.IText3D.SetVisibilityFor(System.Boolean,Onset.Entities.IPlayer[])">
            <summary>
            Sets the visibility of the 3D text for the given players to the given visible state.
            </summary>
            <param name="visible">The visible state to be set</param>
            <param name="players">The players for which the setting will be applied</param>
        </member>
        <member name="M:Onset.Entities.IText3D.SetVisibleFor(Onset.Entities.IPlayer[])">
            <summary>
            Sets the 3D text visibility for the given players to true.
            <see cref="M:Onset.Entities.IText3D.SetVisibilityFor(System.Boolean,Onset.Entities.IPlayer[])"/>
            </summary>
            <param name="players">The players for which the setting will be applied</param>
        </member>
        <member name="M:Onset.Entities.IText3D.AttachTo(Onset.Entities.IEntity,Onset.Dimension.Vector,Onset.Dimension.Vector,System.String)">
            <summary>
            Attaches the 3D text to the given entity.
            </summary>
            <param name="entityTo">The entity the 3D text gets attached to. The only entities allowed are defined by the <see cref="T:Onset.Enums.AttachType"/></param>
            <param name="position">The vector the 3D text gets positioned by</param>
            <param name="r">The rotation of the attachment</param>
            <param name="socketName">The name of the attaching socket</param>
            <returns>True on success</returns>
        </member>
        <member name="T:Onset.Entities.IVehicle">
            <summary>
            Represents a vehicle in the world of onset.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.LicensePlate">
            <summary>
            Teh license plate of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Model">
            <summary>
            The model of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Health">
            <summary>
            The health of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Heading">
            <summary>
            The heading (yaw) of the given vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Velocity">
            <summary>
            The velocity of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Driver">
            <summary>
            The driver of the vehicle.
            Null when no one is driving.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Seats">
            <summary>
            The number of seats in the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Color">
            <summary>
            The color of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Gear">
            <summary>
            The current gear of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Hood">
            <summary>
            The open ratio of the hood in degrees. 0 is closed.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.Trunk">
            <summary>
            The open ratio of the trunk in degrees. 0 is closed.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.EngineState">
            <summary>
            The engine state of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.LightState">
            <summary>
            The light state of the vehicle.
            </summary>
        </member>
        <member name="P:Onset.Entities.IVehicle.LightColor">
            <summary>
            The color of the light of the vehicle.
            </summary>
        </member>
        <member name="M:Onset.Entities.IVehicle.Enter(Onset.Entities.IPlayer,System.Int32)">
            <summary>
            Forces the player to enter this vehicle.
            </summary>
            <param name="player">The player to force</param>
            <param name="seat">The seat the player should be forced to sit</param>
        </member>
        <member name="M:Onset.Entities.IVehicle.IsStreamedFor(Onset.Entities.IPlayer)">
            <summary>
            Checks if the vehicle is streamed to the given player.
            </summary>
            <param name="player">The player to be checked</param>
            <returns>True if the vehicle is streamed to the given player</returns>
        </member>
        <member name="M:Onset.Entities.IVehicle.SetRespawnParams(System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Sets the pre-vehicle respawn parameters.
            </summary>
            <param name="enable">When true the respawning for this vehicle is enabled</param>
            <param name="time">The respawn time in milliseconds</param>
            <param name="repairOnRespawn">When true the vehicle gets repaired on respawn</param>
        </member>
        <member name="M:Onset.Entities.IVehicle.SetLinearVelocity(Onset.Dimension.Vector,System.Boolean)">
            <summary>
            Sets the linear velocity of the vehicle.
            </summary>
            <param name="vector">The vector describing the axis velocity</param>
            <param name="reset">If the vehicle should be reset</param>
        </member>
        <member name="M:Onset.Entities.IVehicle.SetAngularVelocity(Onset.Dimension.Vector,System.Boolean)">
            <summary>
            Sets the angular velocity of the vehicle.
            </summary>
            <param name="vector">The vector describing the axis velocity</param>
            <param name="reset">If the vehicle should be reset</param>
        </member>
        <member name="M:Onset.Entities.IVehicle.AttachNitro">
            <summary>
            Attaches nitro to the vehicle.
            </summary>
        </member>
        <member name="M:Onset.Entities.IVehicle.GetPassenger(System.Int32)">
            <summary>
            Returns the passenger on the given seat.
            </summary>
            <param name="seat">The seat to be selected</param>
            <returns>The player on the seat or null if none is sitting on the seat</returns>
        </member>
        <member name="M:Onset.Entities.IVehicle.SetNitro(System.Boolean)">
            <summary>
            Sets the vehicle nitro enabled state.
            </summary>
            <param name="enabled">The nitro state</param>
        </member>
        <member name="M:Onset.Entities.IVehicle.DetachNitro">
            <summary>
            Detaches nitro from the vehicle.
            </summary>
        </member>
        <member name="M:Onset.Entities.IVehicle.GetDamage(System.Int32)">
            <summary>
            Returns the damage on the given vehicle part.
            </summary>
            <param name="index">The vehicle part index between 1 and 8</param>
            <returns>The damage between 0 (no damage) and 1 (full damage)</returns>
        </member>
        <member name="M:Onset.Entities.IVehicle.Damage(System.Int32,System.Single)">
            <summary>
            Damages the given vehicle part with the given damage value.
            </summary>
            <param name="index">The vehicle part index between 1 and 8</param>
            <param name="damage">The damage between 0 (no damage) and 1 (full damage)</param>
        </member>
        <member name="T:Onset.Enums.Animation">
            <summary>
            All animations available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Enums.AttachType">
            <summary>
            All attach types available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Enums.DamageType">
            <summary>
            The type of damage that can being dealt.
            </summary>
        </member>
        <member name="F:Onset.Enums.DamageType.Weapon">
            <summary>
            Defines damage dealt by <see cref="T:Onset.Enums.Weapon"/>
            </summary>
        </member>
        <member name="F:Onset.Enums.DamageType.Explosion">
            <summary>
            Defines damage dealt by explosion.
            </summary>
        </member>
        <member name="F:Onset.Enums.DamageType.Fire">
            <summary>
            Defines damage dealt by fire.
            </summary>
        </member>
        <member name="F:Onset.Enums.DamageType.Fall">
            <summary>
            Defines damage dealt by falling from high places.
            </summary>
        </member>
        <member name="F:Onset.Enums.DamageType.Vehicle">
            <summary>
            Defines damage dealt by vehicle collisions.
            </summary>
        </member>
        <member name="T:Onset.Enums.EnumHelper">
            <summary>
            Represents a helper class for the enums in this "Enums" folder.
            </summary>
        </member>
        <member name="M:Onset.Enums.EnumHelper.GetName(Onset.Enums.Animation)">
            <summary>
            Returns the name of the given animation, or null.
            </summary>
            <param name="animation">The animation</param>
            <returns>The animation name or null if it fails</returns>
        </member>
        <member name="T:Onset.Enums.HitType">
            <summary>
            All hit types available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Enums.MoveMode">
            <summary>
            Defines the player's move mode and state.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.StandingStill">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is standing still.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.AimWalking">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> aims with e.g. a gun while walking.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Walking">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is just walking.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Running">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is running.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Crouched">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is crouching
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Falling">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is falling.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Skydiving">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is sky diving.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Parachuting">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> has its parachute open.
            </summary>
        </member>
        <member name="F:Onset.Enums.MoveMode.Swimming">
            <summary>
            A <see cref="T:Onset.Entities.IPlayer"/> is swimming.
            </summary>
        </member>
        <member name="T:Onset.Enums.PlayerState">
            <summary>
            All player state types available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Enums.VehicleModel">
            <summary>
            All vehicle models available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Enums.Weapon">
            <summary>
            All weapon models available in Onset.
            </summary>
        </member>
        <member name="T:Onset.Event.EventHelper">
            <summary>
            The EventHelper has some utility functions for the event section of the onset server.
            </summary>
        </member>
        <member name="M:Onset.Event.EventHelper.IsPlayerEvent(Onset.Event.EventType)">
            <summary>
            Returns a boolean whether the given event is a player event - so needs a player as the first argument - or not.
            </summary>
            <param name="type">The event type</param>
            <returns>True if it is a player event</returns>
        </member>
        <member name="T:Onset.Event.EventType">
            <summary>
            All event types which can be listened to.
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerQuit">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> quits the server.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerChat">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> writes something in the chat.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:System.String"/> message)
            </summary> 
        </member>
        <member name="F:Onset.Event.EventType.PlayerChatCommand">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> starts executing a command.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:System.String"/> command, <see cref="T:System.Boolean"/> exists)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerJoin">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> joins the server.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerPickupHit">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> pickups a <see cref="T:Onset.Entities.IPickup"/>.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IPickup"/> pickup)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PackageStart">
            <summary>
            Called when the package was started.<br/>
            ()
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PackageStop">
            <summary>
            Called when the package is being stopped.<br/>
            ()
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.GameTick">
            <summary>
            Called on execution of the main thread.<br/>
            (<see cref="T:System.Single"/> deltaSeconds)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.ClientConnectionRequest">
            <summary>
            Called when a client tries to connect to the server.<br/>
            (<see cref="T:System.String"/> ip, <see cref="T:System.Int32"/> port)<br/>
            <returns>Returning false results in denying the connection request and kicking the client</returns>
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCReachTarget">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> reached its target.<br/>
            (<see cref="T:Onset.Entities.INPC"/> npc)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCDamage">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> is damaged.<br/>
            (<see cref="T:Onset.Entities.INPC"/> npc, <see cref="T:Onset.Enums.DamageType"/> damageType, <see cref="T:System.Single"/> amount)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCSpawn">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> is spawned.<br/>
            (<see cref="T:Onset.Entities.INPC"/> npc)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCDeath">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> dies.<br/>
            (<see cref="T:Onset.Entities.INPC"/> npc)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCStreamIn">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> is streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.INPC"/> npc)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.NPCStreamOut">
            <summary>
            Called when a <see cref="T:Onset.Entities.INPC"/> is no longer streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.INPC"/> npc)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerEnterVehicle">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> enters a <see cref="T:Onset.Entities.IVehicle"/>.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IVehicle"/> vehicle, <see cref="T:System.Int32"/> seat)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerLeaveVehicle">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> leaves a <see cref="T:Onset.Entities.IVehicle"/>.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IVehicle"/> vehicle, <see cref="T:System.Int32"/> seat)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerStateChange">
            <summary>
            Called when a <see cref="T:Onset.Enums.PlayerState"/> changes for a <see cref="T:Onset.Entities.IPlayer"/>.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Enums.PlayerState"/> newState, <see cref="T:Onset.Enums.PlayerState"/> oldState)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.VehicleRespawn">
            <summary>
            Called when a vehicle respawns.<br/>
            (<see cref="T:Onset.Entities.IVehicle"/> vehicle)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.VehicleStreamIn">
            <summary>
            Called when a <see cref="T:Onset.Entities.IVehicle"/> is streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IVehicle"/> vehicle)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.VehicleStreamOut">
            <summary>
            Called when a <see cref="T:Onset.Entities.IVehicle"/> is no longer streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IVehicle"/> vehicle)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerServerAuth">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> has been authorized by the server and is called after <see cref="F:Onset.Event.EventType.ClientConnectionRequest"/> and before <see cref="F:Onset.Event.EventType.PlayerJoin"/><br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerSteamAuth">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> has been authorized by Steam. After this call <see cref="P:Onset.Entities.IPlayer.SteamID"/> is available.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerDownloadFile">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> finished downloading.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:System.String"/> fileName, <see cref="T:System.String"/> checksum)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerStreamIn">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> is streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IPlayer"/> other)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerStreamOut">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> is no longer streamed for a player.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IPlayer"/> other)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerSpawn">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> is respawning.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerDeath">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> dies.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IPlayer"/> killer)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerWeaponShot">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> has shot their weapon.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Enums.Weapon"/> weapon, <see cref="T:Onset.Enums.HitType"/> hitType, <see cref="T:Onset.Entities.IEntity"/> target, <see cref="T:Onset.Dimension.Vector"/> hitPos, <see cref="T:Onset.Dimension.Vector"/> startPos, <see cref="T:Onset.Dimension.Vector"/> impactPos)<br/>
            <returns>Returning false results in preventing the hit from further processing</returns>
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerDamage">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> is damaged.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Enums.DamageType"/> damageType, <see cref="T:System.Single"/> amount)
            </summary>
        </member>
        <member name="F:Onset.Event.EventType.PlayerInteractDoor">
            <summary>
            Called when a <see cref="T:Onset.Entities.IPlayer"/> interacts with a door.<br/>
            (<see cref="T:Onset.Entities.IPlayer"/> player, <see cref="T:Onset.Entities.IDoor"/> door, <see cref="T:System.Boolean"/> isBeingOpened)
            </summary>
        </member>
        <member name="T:Onset.Event.RemoteEvent">
            <summary>
            Methods which have this attribute are marked as handlers for remote events, triggered by a client.
            The first argument of the method must be the <see cref="T:Onset.Entities.IPlayer"/> of the triggering client.
            </summary>
        </member>
        <member name="P:Onset.Event.RemoteEvent.Key">
            <summary>
            The key defines at which point the handler needs to trigger.
            </summary>
        </member>
        <member name="T:Onset.Event.ServerEvent">
            <summary>
            Methods which have this attribute are marked as server events
            handling these events. Every handling method can only handle one event.
            Some events are cancellable which means they can be cancelled at any time.
            When events are cancelled the process connected with this event will be immediately cancelled.
            To cancel an event, the must just have to return false (as a boolean return method). But the method don't need
            a return type, but when, than the only type allowed is boolean, indicating the cancel.
            </summary>
        </member>
        <member name="P:Onset.Event.ServerEvent.Type">
            <summary>
            The event type handled by this marked method.
            </summary>
        </member>
        <member name="T:Onset.Helper.Iterator`1">
            <summary>
            The implementation of an java iterator. It iterates step by step through list selecting every item,
            so that the user can decide want to do with this item.
            </summary>
            <typeparam name="T">The type of the list.</typeparam>
        </member>
        <member name="M:Onset.ILogger.Info(System.String)">
            <summary>
            Prints an info message to the console.
            </summary>
            <param name="message">The message to be printed</param>
        </member>
        <member name="M:Onset.ILogger.Warn(System.String)">
            <summary>
            Prints a warning message to the console.
            </summary>
            <param name="message">The message to be printed</param>
        </member>
        <member name="M:Onset.ILogger.Success(System.String)">
            <summary>
            Prints a success message to the console.
            </summary>
            <param name="message">The message to be printed</param>
        </member>
        <member name="M:Onset.ILogger.Debug(System.String)">
            <summary>
            Prints a debug message to the console.
            The debug message is only visible as long as the plugin is in debug mode (In the Meta attribute, set the Debug flag to true)
            </summary>
            <param name="message">The message to be printed</param>
        </member>
        <member name="M:Onset.ILogger.Fatal(System.String)">
            <summary>
            Prints a fatal message to the console.
            </summary>
            <param name="message">The message to be printed</param>
        </member>
        <member name="M:Onset.ILogger.Error(System.String,System.Exception)">
            <summary>
            Prints an error message to the console.
            </summary>
            <param name="message">The message to be printed</param>
            <param name="exception">The exception to be appended</param>
        </member>
        <member name="T:Onset.IServer">
            <summary>
            The server interface is the api for the server functionality of the wrapper.
            It represents the server of onset and all its functionality.
            </summary>
        </member>
        <member name="P:Onset.IServer.PluginManager">
            <summary>
            The plugin manage of the current onset wrapper instance.
            </summary>
        </member>
        <member name="P:Onset.IServer.Logger">
            <summary>
            The main logger of current COW instance.
            </summary>
        </member>
        <member name="P:Onset.IServer.GameVersion">
            <summary>
            The game version of the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.Global">
            <summary>
            The global server dimension with the default ID of 0.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllPlayers">
            <summary>
            The list containing all players on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllDoors">
            <summary>
            The list containing all doors on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllNPCs">
            <summary>
            The list containing all npcs on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllPickups">
            <summary>
            The list containing all pickups on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllText3Ds">
            <summary>
            The list containing all 3D texts on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllObjects">
            <summary>
            The list containing all objects on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllVehicles">
            <summary>
            The list containing all vehicles on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.AllPackages">
            <summary>
            The list containing all packages running on the current running server.
            </summary>
        </member>
        <member name="P:Onset.IServer.TickRate">
            <summary>
            The tick rate of the main thread. The rate is variable and depends on the load of the server. For an empty server this is between 500Hz and 1000Hz. For 300 concurrent players the tick rate should be above 150Hz.
            </summary>
        </member>
        <member name="P:Onset.IServer.Name">
            <summary>
            The display name of this server.
            </summary>
        </member>
        <member name="P:Onset.IServer.MaxPlayers">
            <summary>
            The player slots count.
            </summary>
        </member>
        <member name="M:Onset.IServer.Exit(System.String)">
            <summary>
            Shutdowns the server.
            <param name="reason">The reason with which the server shutdowns</param>
            </summary>
        </member>
        <member name="M:Onset.IServer.StartPackage(System.String)">
            <summary>
            Starts the package by the given name.
            </summary>
            <param name="packageName">The package name of the wanted package</param>
        </member>
        <member name="M:Onset.IServer.StopPackage(System.String)">
            <summary>
            Stops the package by the given name.
            </summary>
            <param name="packageName">The package name of the wanted package</param>
        </member>
        <member name="M:Onset.IServer.IsPackageStarted(System.String)">
            <summary>
            Checks if the given package is started or not.
            </summary>
            <param name="packageName">The package name of the wanted package</param>
            <returns>True if the given package by the given name is started</returns>
        </member>
        <member name="M:Onset.IServer.RegisterCommands(System.Object)">
            <summary>
            Searches through the given object for <see cref="T:Onset.Command"/> and registers them in the registry.
            </summary>
            <param name="obj">The object to be searched through</param>
        </member>
        <member name="M:Onset.IServer.RegisterCommands``1">
            <summary>
            Creates an object from the given type and searches through this object for <see cref="T:Onset.Command"/> and registers them in the registry.
            </summary>
            <typeparam name="T">The type which gets created. Make sure the type has a default constructor!</typeparam>
        </member>
        <member name="M:Onset.IServer.RegisterEvents(System.Object)">
            <summary>
            Searches through the given object for <see cref="T:Onset.Event.ServerEvent"/> and registers them in the registry.
            </summary>
            <param name="obj">The object to be searched through</param>
        </member>
        <member name="M:Onset.IServer.RegisterEvents``1">
            <summary>
            Creates an object from the given type and searches through this object for <see cref="T:Onset.Event.ServerEvent"/> and registers them in the registry.
            </summary>
            <typeparam name="T">The type which gets created. Make sure the type has a default constructor!</typeparam>
        </member>
        <member name="M:Onset.IServer.RegisterClientEvents(System.Object)">
            <summary>
            Searches through the given object for <see cref="T:Onset.Event.RemoteEvent"/> and registers them in the registry.
            </summary>
            <param name="obj">The object to be searched through</param>
        </member>
        <member name="M:Onset.IServer.RegisterClientEvents``1">
            <summary>
            Creates an object from the given type and searches through this object for <see cref="T:Onset.Event.RemoteEvent"/> and registers them in the registry.
            </summary>
            <typeparam name="T">The type which gets created. Make sure the type has a default constructor!</typeparam>
        </member>
        <member name="M:Onset.IServer.GetDimension(System.UInt32)">
            <summary>
            Returns the dimension object of the given dimension id.
            </summary>
            <param name="id">The id of the wanted dimension</param>
            <returns>The dimension object of the given id</returns>
        </member>
        <member name="M:Onset.IServer.Broadcast(System.String)">
            <summary>
            Broadcasts the given message to all players.
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:Onset.IServer.Broadcast(System.String,Onset.Dimension.Vector,System.Single)">
            <summary>
            Broadcasts the given message to all players in the range around the given position.
            </summary>
            <param name="message">The message to be sent</param>
            <param name="position">The position defining the center</param>
            <param name="range">The radius in which the message gets sent</param>
        </member>
        <member name="M:Onset.IServer.Multicast(System.String,System.Collections.Generic.IEnumerable{Onset.Entities.IPlayer})">
            <summary>
            Multicasts the given message to all given players.
            </summary>
            <param name="message">The message to be sent</param>
            <param name="players">All players which should receive the message</param>
        </member>
        <member name="M:Onset.IServer.Multicast(System.String,Onset.Entities.IPlayer[])">
            <summary>
            Multicasts the given message to all given players.
            </summary>
            <param name="message">The message to be sent</param>
            <param name="players">All players which should receive the message</param>
        </member>
        <member name="M:Onset.IServer.ExecuteTask(System.Action)">
            <summary>
            Executes the given action in the main thread.
            </summary>
            <param name="task">The action which represents the wanted task</param>
        </member>
        <member name="T:Onset.NetworkStats">
            <summary>
            Containing information about the Onset networking.
            </summary>
        </member>
        <member name="T:Onset.Plugin.IPluginManager">
            <summary>
            The plugin manager loads and manages all plugins
            and its dependencies.
            </summary>
        </member>
        <member name="P:Onset.Plugin.IPluginManager.Plugins">
            <summary>
            All plugins which are loaded and managed by this plugin manager instance.
            </summary>
        </member>
        <member name="M:Onset.Plugin.IPluginManager.GetPlugin(System.String)">
            <summary>
            Returns the plugin by the given id of the wanted plugin.
            </summary>
            <param name="id">The id of the wanted plugin</param>
            <returns>The plugin instance or null</returns>
        </member>
        <member name="M:Onset.Plugin.IPluginManager.GetPlugin(System.Predicate{Onset.Plugin.OnsetPlugin})">
            <summary>
            Returns the plugin by a given predicate selector.
            </summary>
            <param name="select">The predicate selector</param>
            <returns>The plugin or null</returns>
        </member>
        <member name="M:Onset.Plugin.IPluginManager.StartPlugin(Onset.Plugin.OnsetPlugin)">
            <summary>
            Starts and registers the given plugin instance. Please use this method with attention
            otherwise unexpected behavior could happen.
            </summary>
            <param name="plugin">The plugin to be enabled</param>
        </member>
        <member name="M:Onset.Plugin.IPluginManager.StopPlugin(Onset.Plugin.OnsetPlugin)">
            <summary>
            Stops the given plugin and unregisters it from this plugin manager.
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="T:Onset.Plugin.Meta">
            <summary>
            The meta defines some needed information about the plugin.
            It also defines which class the main class is and where to start from.
            Consider reading every property for more information.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.ID">
            <summary>
            The id is represents the plugin. The id is required and must be unique.
            If two plugins have the some id, the first will be loaded and the second won't.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.Name">
            <summary>
            The name of the plugins. This is just for representation and is not needed.
            If the name is not set, the id will be the name.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.Author">
            <summary>
            The author of the plugin. This property is also optional
            and can be empty.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.Version">
            <summary>
            The version of the plugin is needed. It can be used to define which version
            of an specified addon is needed so that the addon can work.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.Description">
            <summary>
            The description of the plugin is optional. It defines what the plugin
            is doing or what it should do.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.ApiVersion">
            <summary>
            The api version must be set. The version defines which api is needed minimum to run this plugin.
            The the current runtime has a lower api version than this plugin, the loader will tell the user to update
            the runtime and won't load the plugin to avoid errors.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.Dependencies">
            <summary>
            The dependencies of the plugin. IDs from other plugins can be entered which this plugin needs to work.
            If the plugin is loaded and a dependency not, the loader will wait until all its dependencies are loaded
            and than load this plugin.
            </summary>
        </member>
        <member name="P:Onset.Plugin.Meta.IsDebug">
            <summary>
            This flag defines if the plugin is in debug mode which enables debug messages and some other debug functionality.
            The Onset Wrapper warns the developer, that plugins with debug modes enabled are active.
            </summary>
        </member>
        <member name="T:Onset.Plugin.OnsetPlugin">
            <summary>
            This defines the main entry point for the plugins. It offers the basic functionality and
            access point to the onset api.
            </summary>
        </member>
        <member name="P:Onset.Plugin.OnsetPlugin.Server">
            <summary>
            The server is the main entry point to the server api of onset.
            </summary>
        </member>
        <member name="P:Onset.Plugin.OnsetPlugin.Meta">
            <summary>
            The meta of this plugin.
            </summary>
        </member>
        <member name="P:Onset.Plugin.OnsetPlugin.Logger">
            <summary>
            The logger of this plugin.
            </summary>
        </member>
        <member name="P:Onset.Plugin.OnsetPlugin.State">
            <summary>
            The current state of this plugin.
            </summary>
        </member>
        <member name="M:Onset.Plugin.OnsetPlugin.Load">
            <summary>
            Loads the plugin and starts it after loading is complete.
            </summary>
        </member>
        <member name="M:Onset.Plugin.OnsetPlugin.Unload">
            <summary>
            Unloads the plugin and disables it.
            </summary>
        </member>
        <member name="T:Onset.Utils.Base64">
            <summary>
            Represents a helper class for Base64 encoding and decoding.
            </summary>
        </member>
        <member name="T:Onset.Utils.Color">
            <summary>
            Represents a RGBA color with the 255 format.
            </summary>
        </member>
        <member name="T:Onset.Utils.Time">
            <summary>
            Represents the time functions of onset.
            </summary>
        </member>
        <member name="M:Onset.Utils.Time.StartTest">
            <summary>
            Starts a nano test.
            </summary>
        </member>
        <member name="M:Onset.Utils.Time.StopTest">
            <summary>
            Stops the nano test and returns the nanoseconds which have been passed
            since starting the test with <see cref="M:Onset.Utils.Time.StartTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Onset.Utils.Time.GetTimeSeconds">
            <summary>
            Returns the amount of time since the game started up.
            </summary>
            <returns>The time as float</returns>
        </member>
        <member name="M:Onset.Utils.Time.GetDeltaSeconds">
            <summary>
            Returns the delta seconds of the current game running.
            </summary>
            <returns>The delta as float</returns>
        </member>
        <member name="M:Onset.Utils.Time.GetTickCount">
            <summary>
            Returns the uptime of the actual server (not the Onset server) in milliseconds.
            </summary>
            <returns>The tick count as long</returns>
        </member>
        <member name="M:Onset.Utils.Time.CurrentTimeMillis">
            <summary>
            Returns the current time from January 1st 1970 to now in milliseconds.
            </summary>
            <returns>The milliseconds as long</returns>
        </member>
    </members>
</doc>
